terminal:
docker search kafka
docker pull bitnami/kafka
docker search kafka


terminal pc
docker ps -a
docker network create kafka-network
docker run -d --name kafkaMQ --network kafka-network -p 9092:9092 KAFKA_ADVERTISED=PLAINTEXTz://localhost:9092 bitnami/kafka:latest
docker ps -a
docker ps
docker ps -a
docker logs kafkaMQ
docker rm kafkaMQ
docker run -d --name kafkaMQ --network kafka-network -p 9092:9092 -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092 bitnami/kafka:latest
docker logs kafkaMQ
docker start kafkaMQ


rabbitMQ
docker search rabbitmq
docker pull rabbitmq:3-management
docker run -d --name rabbitMQ -p 5672:5672 -p 15672:15672 rabbitmq:3-management
docker ps -a



elasticsearch
docker network create elastic
docker pull docker.elastic.co/elasticsearch/elasticsearch:8.4.3
docker run --name es-aliconcon --net elastic -p 9200:9200 -p 9300:9300 -it docker.elastic.co/elasticsearch/elasticsearch:8.4.3



Các lệnh về Key
SET key value [EX seconds] [PX milliseconds] [NX|XX]: Thiết lập giá trị của key với các tùy chọn hết hạn và điều kiện.
GET key: Lấy giá trị của key.
DEL key [key ...]: Xóa một hoặc nhiều key.
EXISTS key: Kiểm tra xem key có tồn tại hay không.
EXPIRE key seconds: Đặt thời gian hết hạn cho key tính bằng giây.
TTL key: Kiểm tra thời gian sống còn lại của key.


Các lệnh về String
APPEND key value: Nối thêm một giá trị vào cuối giá trị hiện tại của key.
INCR key: Tăng giá trị của key lên 1.
DECR key: Giảm giá trị của key đi 1.
MGET key [key ...]: Lấy giá trị của nhiều key.
MSET key value [key value ...]: Thiết lập giá trị của nhiều key.



Các lệnh về Hash
HSET key field value: Thiết lập giá trị của một field trong hash.
HGET key field: Lấy giá trị của một field trong hash.
HDEL key field [field ...]: Xóa một hoặc nhiều field trong hash.
HGETALL key: Lấy tất cả các field và giá trị của hash.
HEXISTS key field: Kiểm tra xem một field có tồn tại trong hash hay không.



Các lệnh về List
LPUSH key value [value ...]: Thêm một hoặc nhiều giá trị vào đầu danh sách.
RPUSH key value [value ...]: Thêm một hoặc nhiều giá trị vào cuối danh sách.
LPOP key: Lấy và xóa giá trị đầu tiên của danh sách.
RPOP key: Lấy và xóa giá trị cuối cùng của danh sách.
LRANGE key start stop: Lấy các phần tử từ vị trí start đến stop trong danh sách.


Các lệnh về Set
SADD key member [member ...]: Thêm một hoặc nhiều thành viên vào set.
SREM key member [member ...]: Xóa một hoặc nhiều thành viên khỏi set.
SMEMBERS key: Lấy tất cả các thành viên của set.
SISMEMBER key member: Kiểm tra xem một giá trị có phải là thành viên của set hay không.


Các lệnh về Sorted Set
ZADD key score member [score member ...]: Thêm một hoặc nhiều thành viên vào sorted set với điểm số tương ứng.
ZREM key member [member ...]: Xóa một hoặc nhiều thành viên khỏi sorted set.
ZRANGE key start stop [WITHSCORES]: Lấy các phần tử từ vị trí start đến stop trong sorted set.
ZREVRANGE key start stop [WITHSCORES]: Lấy các phần tử từ vị trí start đến stop trong sorted set theo thứ tự ngược lại.


Các lệnh về Pub/Sub
PUBLISH channel message: Gửi một thông điệp tới channel.
SUBSCRIBE channel [channel ...]: Đăng ký lắng nghe thông điệp từ các channel.


Các lệnh về Transaction
MULTI: Bắt đầu một transaction.
EXEC: Thực thi tất cả các lệnh trong transaction.
DISCARD: Hủy bỏ tất cả các lệnh trong transaction.


Thư viện express-mongo-sanitize được sử dụng trong các ứng dụng Node.js để ngăn chặn các cuộc tấn công 
NoSQL injection bằng cách làm sạch dữ liệu đầu vào trước khi nó được sử dụng trong các truy vấn MongoDB. 
Cuộc tấn công NoSQL injection là một kiểu tấn công mà kẻ tấn công có thể chèn hoặc thao túng dữ liệu trong các truy vấn cơ sở dữ liệu NoSQL, như MongoDB, để thực hiện các hành động không mong muốn hoặc truy cập dữ liệu không được phép.

Thư viện xss trong Node.js được sử dụng để ngăn chặn các cuộc tấn công 
Cross-Site Scripting (XSS) bằng cách làm sạch dữ liệu đầu vào và đầu ra, loại bỏ hoặc mã hóa các thành phần độc hại có thể được nhúng vào nội dung HTML.
Chức năng của Thư viện xss
Làm sạch dữ liệu đầu vào và đầu ra: 
Thư viện xss giúp lọc bỏ hoặc mã hóa các thẻ HTML và các nội dung nguy hiểm, đảm bảo rằng các dữ liệu được hiển thị trên trang web không chứa mã độc.
Ngăn chặn tấn công XSS: Bằng cách sử dụng xss, 
bạn có thể ngăn chặn các kẻ tấn công chèn các tập lệnh độc hại vào các trang web của bạn, bảo vệ người dùng khỏi việc thực thi mã không mong muốn.

Đoạn mã này định nghĩa một middleware cho Express.js để giới hạn số lượng yêu cầu (requests) được thực hiện trong một khoảng thời gian nhất định, giúp bảo vệ ứng dụng khỏi các cuộc tấn công DDoS hoặc lạm dụng tài nguyên.
Cụ thể:
rateLimit: Đây là middleware từ thư viện express-rate-limit dùng để giới hạn tốc độ yêu cầu.
windowMs: 15 * 60 * 1000: Xác định khoảng thời gian 15 phút (15 phút * 60 giây * 1000 milliseconds).
max: 20: Giới hạn số lượng yêu cầu tối đa là 20 trong khoảng thời gian windowMs (15 phút).
skipSuccessfulRequests: true: Nếu yêu cầu thành công (có status code < 400), nó sẽ không được tính vào giới hạn này.
Tóm lại, authLimiter sẽ giới hạn người dùng chỉ có thể thực hiện tối đa 20 yêu cầu trong 15 phút đối với các yêu cầu không thành công. Nếu một yêu cầu thành công, nó sẽ không được tính vào giới hạn này. Middleware này có thể được sử dụng để bảo vệ các endpoint liên quan đến xác thực (authentication) hoặc bất kỳ endpoint nào cần giới hạn tốc độ truy cập.




file paginate.plugin.js plugin


hi Tiết Tác Dụng của Code
Phương thức paginate được thêm vào schema:

Sử dụng schema.static.paginate để thêm phương thức paginate vào bất kỳ schema nào sử dụng plugin này.
Phương thức paginate sẽ nhận hai tham số:
filter: Một đối tượng chứa điều kiện lọc tài liệu từ MongoDB.
options: Một đối tượng chứa các tùy chọn để phân trang, sắp xếp, và populate dữ liệu.
Xử lý tùy chọn sắp xếp (sortBy):

Nếu có options.sortBy, phương thức sẽ xử lý nó thành chuỗi sắp xếp MongoDB.
sortBy là một chuỗi với định dạng field:order (ví dụ: name:asc,createdAt:desc), tách ra và chuyển đổi thành chuỗi sắp xếp MongoDB (sort).
Tính toán limit, page, và skip:

limit: Số lượng tài liệu tối đa trên mỗi trang.
page: Trang hiện tại, xác định điểm bắt đầu của các tài liệu cần truy vấn.
skip: Số lượng tài liệu cần bỏ qua dựa trên trang hiện tại.
Thực hiện các truy vấn:

countPromise: Đếm tổng số tài liệu phù hợp với filter.
docsPromise: Truy vấn tài liệu với filter, sort, và limit.
Nếu có options.populate, plugin sẽ tự động thực hiện populate (nạp dữ liệu liên quan).
Trả về kết quả:

Sử dụng Promise.all để chờ cả hai truy vấn hoàn tất và trả về một đối tượng chứa:
results: Danh sách tài liệu đã phân trang.
page: Trang hiện tại.
limit: Số lượng tài liệu trên mỗi trang.
totalPages: Tổng số trang.
totalResults: Tổng số tài liệu phù hợp với bộ lọc.



Trong MongoDB, các toán tử query (query operators) giúp bạn thực hiện các thao tác tìm kiếm phức tạp. Dưới đây là một số toán tử phổ biến:

1. $eq (Equal)
Mô tả: Tìm các tài liệu có giá trị của một trường bằng với giá trị đã chỉ định.
Ví dụ:
javascript
Sao chép mã
db.users.find({ age: { $eq: 25 } });
Giải thích: Tìm tất cả người dùng có age bằng 25.
2. $ne (Not Equal)
Mô tả: Tìm các tài liệu có giá trị của một trường không bằng với giá trị đã chỉ định.
Ví dụ:
javascript
Sao chép mã
db.users.find({ age: { $ne: 25 } });
Giải thích: Tìm tất cả người dùng có age không bằng 25.
3. $gt (Greater Than)
Mô tả: Tìm các tài liệu có giá trị của một trường lớn hơn giá trị đã chỉ định.
Ví dụ:
javascript
Sao chép mã
db.users.find({ age: { $gt: 25 } });
Giải thích: Tìm tất cả người dùng có age lớn hơn 25.
4. $gte (Greater Than or Equal)
Mô tả: Tìm các tài liệu có giá trị của một trường lớn hơn hoặc bằng giá trị đã chỉ định.
Ví dụ:
javascript
Sao chép mã
db.users.find({ age: { $gte: 25 } });
Giải thích: Tìm tất cả người dùng có age lớn hơn hoặc bằng 25.
5. $lt (Less Than)
Mô tả: Tìm các tài liệu có giá trị của một trường nhỏ hơn giá trị đã chỉ định.
Ví dụ:
javascript
Sao chép mã
db.users.find({ age: { $lt: 25 } });
Giải thích: Tìm tất cả người dùng có age nhỏ hơn 25.
6. $lte (Less Than or Equal)
Mô tả: Tìm các tài liệu có giá trị của một trường nhỏ hơn hoặc bằng giá trị đã chỉ định.
Ví dụ:
javascript
Sao chép mã
db.users.find({ age: { $lte: 25 } });
Giải thích: Tìm tất cả người dùng có age nhỏ hơn hoặc bằng 25.
7. $in (In)
Mô tả: Tìm các tài liệu có giá trị của một trường bằng với một trong các giá trị trong mảng đã chỉ định.
Ví dụ:
javascript
Sao chép mã
db.users.find({ age: { $in: [25, 30, 35] } });
Giải thích: Tìm tất cả người dùng có age bằng 25, 30 hoặc 35.
8. $nin (Not In)
Mô tả: Tìm các tài liệu có giá trị của một trường không bằng với bất kỳ giá trị nào trong mảng đã chỉ định.
Ví dụ:
javascript
Sao chép mã
db.users.find({ age: { $nin: [25, 30, 35] } });
Giải thích: Tìm tất cả người dùng có age không bằng 25, 30 hoặc 35.
9. $and (Logical AND)
Mô tả: Tìm các tài liệu đáp ứng tất cả các điều kiện đã chỉ định.
Ví dụ:
javascript
Sao chép mã
db.users.find({ $and: [{ age: { $gt: 25 } }, { age: { $lt: 35 } }] });
Giải thích: Tìm tất cả người dùng có age lớn hơn 25 và nhỏ hơn 35.
10. $or (Logical OR)
Mô tả: Tìm các tài liệu đáp ứng ít nhất một trong các điều kiện đã chỉ định.
Ví dụ:
javascript
Sao chép mã
db.users.find({ $or: [{ age: { $lt: 25 } }, { age: { $gt: 35 } }] });
Giải thích: Tìm tất cả người dùng có age nhỏ hơn 25 hoặc lớn hơn 35.
11. $not (Logical NOT)
Mô tả: Tìm các tài liệu không đáp ứng điều kiện đã chỉ định.
Ví dụ:
javascript
Sao chép mã
db.users.find({ age: { $not: { $gt: 25 } } });
Giải thích: Tìm tất cả người dùng không có age lớn hơn 25.
12. $exists (Field Existence)
Mô tả: Tìm các tài liệu có hoặc không có một trường cụ thể.
Ví dụ:
javascript
Sao chép mã
db.users.find({ email: { $exists: true } });
Giải thích: Tìm tất cả người dùng có trường email tồn tại.
13. $regex (Regular Expression)
Mô tả: Tìm các tài liệu có giá trị của một trường khớp với biểu thức chính quy.
Ví dụ:
javascript
Sao chép mã
db.users.find({ name: { $regex: /^J/, $options: 'i' } });
Giải thích: Tìm tất cả người dùng có tên bắt đầu bằng "J", không phân biệt chữ hoa/thường.
14. $size (Array Size)
Mô tả: Tìm các tài liệu có một mảng với số phần tử nhất định.
Ví dụ:
javascript
Sao chép mã
db.users.find({ hobbies: { $size: 3 } });
Giải thích: Tìm tất cả người dùng có mảng hobbies chứa chính xác 3 phần tử.
15. $elemMatch (Element Match)
Mô tả: Tìm các tài liệu có một mảng chứa ít nhất một phần tử thỏa mãn tất cả các điều kiện đã chỉ định.
Ví dụ:
javascript
Sao chép mã
db.users.find({ scores: { $elemMatch: { subject: "math", score: { $gt: 90 } } } });
Giải thích: Tìm tất cả người dùng có mảng scores chứa phần tử có subject là "math" và score lớn hơn 90.
16. $all (Array Match All)
Mô tả: Tìm các tài liệu có một mảng chứa tất cả các giá trị đã chỉ định.
Ví dụ:
javascript
Sao chép mã
db.users.find({ hobbies: { $all: ["reading", "sports"] } });
Giải thích: Tìm tất cả người dùng có mảng hobbies chứa cả "reading" và "sports".
Những toán tử này là cơ bản trong MongoDB, nhưng có thể kết hợp chúng để tạo ra các truy vấn phức tạp hơn, tùy thuộc vào yêu cầu của ứng dụng.
17. $type (Type)
Mô tả: Tìm các tài liệu có giá trị của một trường thuộc kiểu dữ liệu đã chỉ định.
Ví dụ:
javascript
Sao chép mã
db.users.find({ age: { $type: "int" } });
Giải thích: Tìm tất cả người dùng có age là số nguyên (int).
18. $mod (Modulo)
Mô tả: Tìm các tài liệu có giá trị của một trường chia hết cho số đã chỉ định.
Ví dụ:
javascript
Sao chép mã
db.users.find({ age: { $mod: [4, 0] } });
Giải thích: Tìm tất cả người dùng có age chia hết cho 4.
19. $text (Text Search)
Mô tả: Tìm các tài liệu có chứa từ hoặc cụm từ trong một trường văn bản được lập chỉ mục.
Ví dụ:
javascript
Sao chép mã
db.articles.find({ $text: { $search: "MongoDB tutorial" } });
Giải thích: Tìm tất cả các bài viết có chứa cụm từ "MongoDB tutorial".
20. $where (JavaScript Expression)
Mô tả: Tìm các tài liệu khớp với một điều kiện được định nghĩa bởi biểu thức JavaScript.
Ví dụ:
javascript
Sao chép mã
db.users.find({ $where: "this.age > 25" });
Giải thích: Tìm tất cả người dùng có age lớn hơn 25, sử dụng JavaScript.
21. $expr (Expression)
Mô tả: Tìm các tài liệu mà một biểu thức so sánh giữa các trường trong tài liệu.
Ví dụ:
javascript
Sao chép mã
db.sales.find({ $expr: { $gt: ["$amount", "$target"] } });
Giải thích: Tìm tất cả các tài liệu sales có trường amount lớn hơn target.
22. $allElementsTrue / $allElementsFalse (Array Elements)
Mô tả: Tìm các tài liệu có tất cả hoặc không có phần tử nào trong một mảng khớp với điều kiện đã chỉ định.
Ví dụ:
javascript
Sao chép mã
db.surveys.find({ responses: { $allElementsTrue: [true, true, false] } });
Giải thích: Tìm tất cả các tài liệu trong surveys mà mảng responses có tất cả phần tử là true.
23. $size (Array Size)
Mô tả: Tìm các tài liệu có một mảng với số phần tử nhất định.
Ví dụ:
javascript
Sao chép mã
db.users.find({ hobbies: { $size: 3 } });
Giải thích: Tìm tất cả người dùng có mảng hobbies chứa chính xác 3 phần tử.
24. $geoWithin (Geospatial Within)
Mô tả: Tìm các tài liệu có điểm địa lý nằm trong một vùng đã chỉ định.
Ví dụ:
javascript
Sao chép mã
db.places.find({ location: { $geoWithin: { $centerSphere: [[-74, 40.74], 10/3963.2] } } });
Giải thích: Tìm tất cả các địa điểm có location nằm trong một vòng tròn với bán kính 10 dặm, trung tâm tại tọa độ [-74, 40.74].
25. $near (Geospatial Near)
Mô tả: Tìm các tài liệu sắp xếp theo khoảng cách gần nhất đến một điểm địa lý đã chỉ định.
Ví dụ:
javascript
Sao chép mã
db.places.find({ location: { $near: { $geometry: { type: "Point", coordinates: [ -73.9667, 40.78 ] }, $maxDistance: 1000 } } });
Giải thích: Tìm tất cả các địa điểm gần với tọa độ [-73.9667, 40.78] trong khoảng cách 1000 mét.
26. $lookup (Aggregation)
Mô tả: Thực hiện phép nối (join) trên các tài liệu từ một collection khác.
Ví dụ:
javascript
Sao chép mã
db.orders.aggregate([
  {
    $lookup: {
      from: "products",
      localField: "productId",
      foreignField: "_id",
      as: "productDetails"
    }
  }
]);
Giải thích: Lấy tất cả các orders và nối (join) với products để lấy thông tin chi tiết về sản phẩm.
27. $match (Aggregation)
Mô tả: Lọc các tài liệu trong pipeline bằng các tiêu chí nhất định.
Ví dụ:
javascript
Sao chép mã
db.orders.aggregate([
  { $match: { status: "completed" } }
]);
Giải thích: Tìm tất cả các đơn hàng (orders) có status là "completed".
28. $group (Aggregation)
Mô tả: Nhóm các tài liệu theo một trường hoặc nhóm các giá trị.
Ví dụ:
javascript
Sao chép mã
db.orders.aggregate([
  {
    $group: {
      _id: "$customerId",
      totalAmount: { $sum: "$amount" }
    }
  }
]);
Giải thích: Tính tổng số tiền (totalAmount) của tất cả đơn hàng cho mỗi khách hàng (customerId).
29. $unwind (Aggregation)
Mô tả: Tách các phần tử trong một mảng thành các tài liệu riêng lẻ.
Ví dụ:
javascript
Sao chép mã
db.orders.aggregate([
  { $unwind: "$items" }
]);
Giải thích: Tách từng phần tử trong mảng items của đơn hàng thành một tài liệu riêng lẻ.
30. $addFields (Aggregation)
Mô tả: Thêm các trường mới vào các tài liệu trong pipeline.
Ví dụ:
javascript
Sao chép mã
db.orders.aggregate([
  { $addFields: { totalCost: { $multiply: ["$price", "$quantity"] } } }
]);
Giải thích: Thêm trường totalCost là tích của price và quantity vào mỗi tài liệu đơn hàng.
31. $project (Aggregation)
Mô tả: Chọn hoặc loại bỏ các trường khỏi các tài liệu trong pipeline.
Ví dụ:
javascript
Sao chép mã
db.orders.aggregate([
  { $project: { customerId: 1, totalAmount: 1, _id: 0 } }
]);
Giải thích: Chỉ giữ lại các trường customerId và totalAmount, loại bỏ _id.
32. $out (Aggregation)
Mô tả: Ghi các tài liệu kết quả của pipeline vào một collection mới.
Ví dụ:
javascript
Sao chép mã
db.orders.aggregate([
  { $group: { _id: "$customerId", totalAmount: { $sum: "$amount" } } },
  { $out: "customerTotals" }
]);
Giải thích: Ghi kết quả tổng số tiền (totalAmount) của mỗi khách hàng vào collection customerTotals.
33. $merge (Aggregation)
Mô tả: Hợp nhất các tài liệu kết quả của pipeline vào một collection hiện có.
Ví dụ:
javascript
Sao chép mã
db.orders.aggregate([
  { $group: { _id: "$customerId", totalAmount: { $sum: "$amount" } } },
  { $merge: { into: "customerTotals", on: "_id", whenMatched: "merge", whenNotMatched: "insert" } }
]);
Giải thích: Hợp nhất kết quả tổng số tiền của mỗi khách hàng vào collection customerTotals, cập nhật tài liệu nếu tồn tại, hoặc thêm tài liệu mới nếu không tồn tại.
34. $bucket (Aggregation)
Mô tả: Nhóm các tài liệu vào các "bucket" (phân đoạn) dựa trên giá trị của một trường.
Ví dụ:
javascript
Sao chép mã
db.sales.aggregate([
  { $bucket: { groupBy: "$amount", boundaries: [0, 100, 200, 300], default: "Other", output: { count: { $sum: 1 } } } }
]);
Giải thích: Nhóm các tài liệu sales vào các phân đoạn dựa trên giá trị amount (0-99, 100-199, 200-299).
35. $sample (Aggregation)
Mô tả: Chọn ngẫu nhiên một số lượng tài liệu từ collection.
Ví dụ:
javascript
Sao chép mã
db.orders.aggregate([
  { $sample: { size: 5 } }
]);
Giải thích: Lấy ngẫu nhiên 5 đơn hàng từ collection orders.